#include <Wire.h>
#include "i2c.h"
#include <avr/sleep.h>
#include <avr/wdt.h>
#include <lmic.h>
#include <hal/hal.h>
#include <SPI.h>

#include "LowPower.h"
#include <Arduino.h>



#include "i2c_BMP280.h"
BMP280 bmp280;


// LoRaWAN NwkSKey, network session key
// This is the default Semtech key, which is used by the early prototype TTN
// network.
static const PROGMEM u1_t NWKSKEY[16] = { 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55 };

// LoRaWAN AppSKey, application session key
// This is the default Semtech key, which is used by the early prototype TTN
// network.
static const u1_t PROGMEM APPSKEY[16] = { 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55, 0x55 };

// LoRaWAN end-device address (DevAddr)
static const u4_t DEVADDR = 0x55555555; // <-- Change this address for every node!

// These callbacks are only used in over-the-air activation, so they are
// left empty here (we cannot leave them out completely unless
// DISABLE_JOIN is set in config.h, otherwise the linker will complain).
void os_getArtEui (u1_t* buf) { }
void os_getDevEui (u1_t* buf) { }
void os_getDevKey (u1_t* buf) { }


float finalTemp;
int  finalTemp100;
byte highbyte;
byte lowbyte;

int sleepcycles = 40;  
bool sleeping = false;
   

static osjob_t sendjob;

// Schedule TX every this many seconds (might become longer due to duty
// cycle limitations).
const unsigned TX_INTERVAL = 300;

// Pin mapping

const lmic_pinmap lmic_pins = {
    .nss = 10,
    .rxtx = LMIC_UNUSED_PIN,
    .rst = 9,
    .dio = {3, 15, LMIC_UNUSED_PIN},
};


void onEvent (ev_t ev) {
    Serial.print(os_getTime());
    Serial.print(": ");
    switch(ev) {
        case EV_SCAN_TIMEOUT:
          //  Serial.println(F("EV_SCAN_TIMEOUT"));
            break;
        case EV_BEACON_FOUND:
          //  Serial.println(F("EV_BEACON_FOUND"));
            break;
        case EV_BEACON_MISSED:
          //  Serial.println(F("EV_BEACON_MISSED"));
            break;
        case EV_BEACON_TRACKED:
         //   Serial.println(F("EV_BEACON_TRACKED"));
            break;
        case EV_JOINING:
            Serial.println(F("EV_JOINING"));
            break;
        case EV_JOINED:
          //  Serial.println(F("EV_JOINED"));
            break;
        case EV_RFU1:
          //  Serial.println(F("EV_RFU1"));
            break;
        case EV_JOIN_FAILED:
         //   Serial.println(F("EV_JOIN_FAILED"));
            break;
        case EV_REJOIN_FAILED:
         //   Serial.println(F("EV_REJOIN_FAILED"));
            break;
        case EV_TXCOMPLETE:
            sleeping = true;
          //  Serial.println(F("EV_TXCOMPLETE (includes waiting for RX windows)"));
            if (LMIC.txrxFlags & TXRX_ACK)
          //    Serial.println(F("Received ack"));
            if (LMIC.dataLen) {
           //   Serial.println(F("Received "));
           //   Serial.println(LMIC.dataLen);
            //  Serial.println(F(" bytes of payload"));
              
            }
            // Schedule next transmission
            os_setTimedCallback(&sendjob, os_getTime()+sec2osticks(TX_INTERVAL), do_send);
            break;
        case EV_LOST_TSYNC:
           // Serial.println(F("EV_LOST_TSYNC"));
            break;
        case EV_RESET:
          //  Serial.println(F("EV_RESET"));
            break;
        case EV_RXCOMPLETE:
            // data received in ping slot
           // Serial.println(F("EV_RXCOMPLETE"));
            break;
        case EV_LINK_DEAD:
          //  Serial.println(F("EV_LINK_DEAD"));
            break;
        case EV_LINK_ALIVE:
         //   Serial.println(F("EV_LINK_ALIVE"));
            break;
         default:
         //   Serial.println(F("Unknown event"));
            break;
    }
}

void do_send(osjob_t* j){
    // Check if there is not a current TX/RX job running
    if (LMIC.opmode & OP_TXRXPEND) {
      //  Serial.println(F("OP_TXRXPEND, not sending"));
    } else {



    bmp280.awaitMeasurement();

    float temperature;
    bmp280.getTemperature(temperature);

    float pascal;
    bmp280.getPressure(pascal);

    static float meters, metersold;
    bmp280.getAltitude(meters);
    metersold = (metersold * 10 + meters)/11;

    bmp280.triggerMeasurement();

  //  Serial.print(" HeightPT1: ");
  //  Serial.print(metersold);
  //  Serial.print(" m; Height: ");
  //  Serial.print(meters);
  //  Serial.print(" Pressure: ");
  //  Serial.print(pascal);
  //  Serial.print(" Pa; T: ");
    Serial.print(temperature);
    Serial.println(" C");
    delay(5000);



    finalTemp = temperature;
  //  Serial.println(F("Temp is"));
  //  Serial.println(finalTemp);
    finalTemp100 =  finalTemp *100;
  //  Serial.println(F("Temp100 is"));
 //   Serial.println(finalTemp100);
    
    highbyte = highByte(finalTemp100);
    lowbyte = lowByte(finalTemp100);
   
 //    Serial.println(F("high byte is"));
 //   Serial.println(highbyte);
 //    Serial.println(F("low byte is"));
  //  Serial.println(lowbyte);


        // Prepare upstream data transmission at the next possible time.
        
        uint8_t messagePacket[] ={highbyte,lowbyte};

   //   Serial.println("ARRAY Is  ");
   //     int i;
   //     for (i = 0; i < 2; i = i + 1) {
   //     Serial.println(messagePacket[i]);
    //    }
   //   Serial.println("DONE ARRAY");
      
       
        LMIC_setTxData2(1, messagePacket, sizeof(messagePacket), 0);
     //   Serial.println(F("Packet queued"));
    }
    // Next TX is scheduled after TX_COMPLETE event.
}

void setup() {
    delay(5000);
  //  Serial.print("Probe BMP280: ");
     if (bmp280.initialize()) Serial.println("Sensor found");
    else
    {
       // Serial.println("Sensor missing");
        while (1) {}
    }

    // onetime-measure:
    bmp280.setEnabled(0);
    bmp280.triggerMeasurement();

    
    Serial.begin(115200);
   // Serial.println(F("Starting"));

   

    
    #ifdef VCC_ENABLE
    // For Pinoccio Scout boards
    pinMode(VCC_ENABLE, OUTPUT);
    digitalWrite(VCC_ENABLE, HIGH);
    delay(1000);
    #endif

    // LMIC init
    os_init();
    // Reset the MAC state. Session and pending data transfers will be discarded.
    LMIC_reset();

    // Set static session parameters. Instead of dynamically establishing a session
    // by joining the network, precomputed session parameters are be provided.
    #ifdef PROGMEM
    // On AVR, these values are stored in flash and only copied to RAM
    // once. Copy them to a temporary buffer here, LMIC_setSession will
    // copy them into a buffer of its own again.
    uint8_t appskey[sizeof(APPSKEY)];
    uint8_t nwkskey[sizeof(NWKSKEY)];
    memcpy_P(appskey, APPSKEY, sizeof(APPSKEY));
    memcpy_P(nwkskey, NWKSKEY, sizeof(NWKSKEY));
    LMIC_setSession (0x1, DEVADDR, nwkskey, appskey);
    #else
    // If not running an AVR with PROGMEM, just use the arrays directly
    LMIC_setSession (0x1, DEVADDR, NWKSKEY, APPSKEY);
    #endif

    #if defined(CFG_eu868)
    // Set up the channels used by the Things Network, which corresponds
    // to the defaults of most gateways. Without this, only three base
    // channels from the LoRaWAN specification are used, which certainly
    // works, so it is good for debugging, but can overload those
    // frequencies, so be sure to configure the full frequency range of
    // your network here (unless your network autoconfigures them).
    // Setting up channels should happen after LMIC_setSession, as that
    // configures the minimal channel set.
    // NA-US channels 0-71 are configured automatically
    LMIC_setupChannel(0, 915000000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
    LMIC_setupChannel(1, 915000000, DR_RANGE_MAP(DR_SF12, DR_SF7B), BAND_CENTI);      // g-band
    LMIC_setupChannel(2, 915000000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
    LMIC_setupChannel(3, 915000000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
    LMIC_setupChannel(4, 915000000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
    LMIC_setupChannel(5, 915000000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
    LMIC_setupChannel(6, 915000000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
    LMIC_setupChannel(7, 915000000, DR_RANGE_MAP(DR_SF12, DR_SF7),  BAND_CENTI);      // g-band
    LMIC_setupChannel(8, 915000000, DR_RANGE_MAP(DR_FSK,  DR_FSK),  BAND_MILLI);      // g2-band
    // TTN defines an additional channel at 869.525Mhz using SF9 for class B
    // devices' ping slots. LMIC does not have an easy way to define set this
    // frequency and support for class B is spotty and untested, so this
    // frequency is not configured here.
    #elif defined(CFG_us915)
    // NA-US channels 0-71 are configured automatically
    // but only one group of 8 should (a subband) should be active
    // TTN recommends the second sub band, 1 in a zero based count.
    // https://github.com/TheThingsNetwork/gateway-conf/blob/master/US-global_conf.json
    LMIC_selectSubBand(1);
    #endif

    // Disable link check validation
    LMIC_setLinkCheckMode(0);

    // TTN uses SF9 for its RX2 window.
    LMIC.dn2Dr = DR_SF9;

    // Set data rate and transmit power for uplink (note: txpow seems to be ignored by the library)
    LMIC_setDrTxpow(DR_SF7,14);

   
   
}

void loop() {

   

  
    do_send(&sendjob);
    
     while(sleeping == false)
      {
        os_runloop_once();
      }
      sleeping = false;
      for (int i=0;i<sleepcycles;i++)
      {
          LowPower.powerDown(SLEEP_8S, ADC_OFF, BOD_OFF);    //sleep 8 seconds * sleepcycles
      }



    
}
